MySQL查询过程：
客户端/服务端通信协议：
MySQL客户端/服务端通信协议是“半双工”的：一旦一端开始发送消息，另一端要接收完整个消息才能响应它，所以我们无
法也无须将一个消息切成小块独立发送，也没有办法进行流量控制。
客户端必须完整的接收整个返回结果，而不能简单的只取前面几条结果，然后让服务器停止发送，因而在实际开发中，尽量
保持查询简单且只返回必需的数据，查询中尽量避免使用SELECT *以及加上LIMIT限制；

2、缓存失效：
数据库写操作时，mysql必须将表对应的缓存设置为失效消耗性能；
任何查询语句，在开始之前都要进行缓存检查；
最后的忠告是不要轻易打开查询缓存，特别是写密集型应用。如果你实在是忍不住，可以将query_cache_type设置为
DEMAND，这时只有加入SQL_CACHE的查询才会走缓存，其他查询则不会，这样可以非常自由地控制哪些查询需要被缓存。

3、语法解析

4、查询优化
一条查询可以有很多种执行方式，优化器就是找到这其中最好的执行方式；

1 客户端向MySQL服务器发送一条查询请求
2 服务器首先检查查询缓存，如果命中缓存，则立刻返回存储在缓存中的结果。否则进入下一阶段
3 服务器进行SQL解析、预处理、再由优化器生成对应的执行计划
4 MySQL根据执行计划，调用存储引擎的API来执行查询
5 将结果返回给客户端，同时缓存查询结果

优化：
1、整型就比字符操作代价低，因而会使用整型来存储ip地址，使用DATETIME来存储时间，而不是使用字符串；
2、创建高性能索引；