sql优化实际优化的是 查询；
-----------------------------------------------------------------------------------------
认识mysql的数据结构和索引；
缓存：缓存就是一个 map(key:sql的hash值,value:结果集resultSet)，直接去缓存拿数据，有则获取，没有则去
数据库中查询，并保存到缓存中；当数据库中该数据被改变时，这个缓存就会失效；

存储引擎(Storage Engines)：无论 关系型or非关系型 数据库，数据都存在 文件 里面；

mysql引擎：①Innodb；②Myisam；
①Innodb存储文件：.frm表定义文件，.idb数据文件；
②Myisam存储文件：.frm表定义文件，.myd数据文件，.myi索引文件；

性能：
影响性能的因素：
每个sql都是一个 I/O操作；1+1次查询，1+n次查询；
提高性能：

索引：高效定位到数据的数据结构；例如，select * from table where id=1;数据都存储在文件里面，如果没有索
引，就会在机械硬盘上轮训每一条数据，虽然都有缓存配置，但是效率依然很低，因为要全表扫描，才能找到 id=1的数据；
其实索引也是参考了 文件系统；
文件系统里面有table.idb[柱面，磁道，扇区]文件，该文件通过柱面，磁道，扇区 将数据定位到 机械硬盘的某一扇区；
索引 与 文件系统类似，如果查找 id=1的数据时，如果单纯查数据文件，要全表扫描；如果有索引 1 0*12，指出数据1
就在 磁盘0-12位置之间，就提升了效率；

mysql中的索引结构：
Hash：对 id进行索引的话，就会对 id进行hash，会落到不同的槽位里面；mysql一般不用hash，①有冲突；②无法
做范围查询(例 where id > 1)；
FullText：全文搜索
R-Tree：空间索引
GEOHash：
B+ Tree：衡量一个索引的标准-IO渐进复杂度，即当数据增多时，数据是否依然高效；树中每个节点都是一个IO的话，
如果树的高度很高，复杂度太高；B+ Tree不会带来这个问题，B+ Tree是对 B Tree的一个优化，

面试题：sql如何优化？
查询容易，优化不易，且写且珍惜！

锁：有完索引才有锁；

优化：
①永远用小结果集驱动大结果集；join；
②只取出自己需要的 字段；a 数据量；b 排序占用空间；
③仅仅使用最有效的过滤条件；key length；
④尽量避免复杂的 join和子查询；占用锁，会将表锁住；
