springboot就是一个配置好的mvc web项目，只要导入父启动包，web启动包，就可以进行web开发同springmvc；
springboot启动相当于将web项目发布到tomcat服务器中，然后启动tomcat服务器；
springboot的所有系统配置，都在 application.properties中；
----------------------------------------------------------------------------------------
任务学习3：springboot快速启动；
springboot开发一定要使用maven获取其他项目管理工具；
pom.xml文件中只要导入 父启动包spring-boot-starter-parent和web启动包spring-boot-starter-web就直接
可以进行web开发了；
父启动包
<parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.5.4.RELEASE</version>
</parent>
web启动包
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
直接创建 SampleController类，启动springboot，浏览器访问：localhost:8080/ 就可以返回 Hello World
@Controller
@EnableAutoConfiguration
public class SampleController {
	@RequestMapping("/")
	@ResponseBody
	public String home() {
		return "Hello World!";
	}
	public static void main(String[] args) throws Exception {
		SpringApplication.run(SampleController.class, args);
	}
}
------------------------------------------------------------------------------------------
任务学习6：Springboot基本概念（建立统一父pom）
maven父模块pom.xml内容如下：
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-dependencies</artifactId>
            <version>1.5.4.RELEASE</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>
maven子模块内容如下：导入父pom.xml并依赖springboot的web启动包
<parent>
    <groupId>cn.mldn</groupId>
    <artifactId>microboot</artifactId>
    <version>0.0.1-SNAPSHOT</version>
</parent>
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
</dependencies>
子模块microboot-base中创建 SampleController类，启动springboot，浏览器访问：localhost:8080/ 就可
以返回 Hello World
@Controller
@EnableAutoConfiguration
public class SampleController {
	@RequestMapping("/")
	@ResponseBody
	public String home() {
		return "Hello World!";
	}
	public static void main(String[] args) throws Exception {
		SpringApplication.run(SampleController.class, args);
	}
}
-----------------------------------------------------------------------------------------
任务学习7：Springboot基本概念（springboot代码测试）
修改上面 microboot-base子模块的 pom.xml文件，引入test启动包和 junit包
<dependencies>
    web启动包
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    test启动包
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-test</artifactId>
		<scope>test</scope>
	</dependency>
	<dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>
------------------------------------------------------------------------------------------
任务学习8：Springboot基本概念（springboot启动注解分析）
@EnableAutoConfiguration：springboot启动注解，与启动主类一起配置，如下：

@EnableAutoConfiguration
@ComponentScan("cn.mldn.microboot-base")
public class BootStarp {
    public static void main(String[] args) throws Exception {
        SpringApplication.run(BootStarp.class, args);
    }
}
当执行springboot启动命令时，会自动扫描cn.mldn.microboot-base包，将该包下使用spring注解的类注册到
spring容器中；
-----------------------------------------------------------------------------------------
任务学习9：Springboot基本概念（springboot路径访问控制）
rest风格：路径参数；
访问路径：localhost:8080/echo/hello，其中 /hello不少路径而是路径参数；

@RequestMappting("/echo/{param}")
public String echo(@PathVariable("param") String msg){
    return msg;
}
*****************************************************************************************
重点：springboot启动实质：将web项目发布到tomcat容器中，然后启动tomcat容器；那么当修改程序时，需要反复
关闭开启springboot，怎么办？子模块pom.xml中导入 springloaded包和spring-boot-devtools包，引入后，
修改项目后，可以自动加载，不用反复启动springboot；
springboot就是用来简化开发web项目的；
*****************************************************************************************
-----------------------------------------------------------------------------------------
任务学习10：Springboot基本概念（使用内置对象）
@RequestMappting("/echo")
public String echo(HttpServletRequest req,HttpServletResponse resp){
    ...
    return msg;
}
通过以上信息，可以发现，springboot是以web形式运行的；
----------------------------------------------------------------------------------------
任务学习13：Springboot开发深入（配置环境属性）
预定大于配置：property资源文件必须配置到 resources目录下，文件名必须为 application.properties；
application.properties配置文件内容如下：
server.port=80      注意：该配置文件内容是内定的，不是自己随便写的；
也可以使用 application.yml代替 application.properties；
注意，这个 application.properties资源文件只是 配置环境属性的，不是定义自己的配置信息的，要想自己定义
配置信息，要在该目录下创建其他properties文件
注意：springboot的所有配置都在 application.properties/application.yml里面完成；
----------------------------------------------------------------------------------------
任务学习14：Springboot开发深入（读取资源文件）
在 resources/i18n/ 目录下创建 Message.properties文件和Page.properties，路径，文件名都是定死的；
要想读取这两个资源文件，在 application.yml中配置即可，具体如下：
spring:
    messages:
        basename: i18n/Messages,i18n/Pages
完成以上配置后，会将 MessageSource对象放到到spring容器中，获得方法如下：
public class AController{
    @Autowired
    private MessageSource messageSource;
    public String getMessage(String key,String... args){//args为配置文件中占位符参数
        return messageSource.getMessage(key,args,Local.getDefault());
    }
}
----------------------------------------------------------------------------------------
任务学习15：Springboot开发深入（Bean配置）
Spring配置分为 2种：①xml配置；②Bean配置；
①springboot支持配置文件，需要在启动类上面加 @ImportResorce("classpath:spring-common.xml");
②使用@Configuration，@Bean注解；注意，AppConfig类所在包必须能包@ComponentSacn("包路径")扫到；
@Configuration
public class AppConfig{
    @Bean
    public Apple getApple(){
        return new Apple();
    }
}
----------------------------------------------------------------------------------------
任务学习16：Springboot开发深入（模版渲染）
springboot中使用的是普通的 html页面，并通过thymeleaf模版来渲染 html页面；需要导入
spring-boot-starter-thymeleaf包；
控制层：
    model.addAttribute("url","www.mldn.cn");
    return "message/message_show";   //后缀默认是 html，会跳转到 message_show.html页面
所有thymeleaf渲染的 html页面必须定义在 src/main/viwe|resources/templates 目录中；
message_show.html页面内容如下：①各个标签必须完结；②html中加入<html xmlns:th="http://www.thymeleaf.org">

以上是跳转页面，那么非跳转页面怎么办？
src/main/viwe|resources下创建 static目录，存放非跳转页面和css,js,images；
----------------------------------------------------------------------------------------
