创建 com.dongnao.vip.redis.jedis.JedisUtils 类
public class JedisUtils {
    /**JedisPool：jedis对象连接池，封装 jedis 对象队列 pool.getResource()从连接池中获取jedis对象*/
    private JedisPool pool;
}
创建 JedisUtils构造方法，在构造方法中封装连接池配置 JedisPoolConfig，并创建连接池 JedisPool
public JedisUtils(String ip,int port,String auth){
    /*如果没有连接池，则创建连接池 pool*/
    if (this.pool == null){
    /**JedisPoolConfig 封装 JedisPool 的配置信息*/
        JedisPoolConfig config = new JedisPoolConfig();
        /*pool连接池最大连接数*/
        config.setMaxTotal(500);
        /*pool连接池最大空闲连接数*/
        config.setMaxIdle(5);
        /*borrow(引入)一个jedis实例时，最大等待时间，如果超过等待时间，则直接抛出JedisConnectionException*/
        config.setMaxWaitMillis(100);
        /*在borrow(引入)一个jedis实例时，是否提前进行验证操作；如果为true，则得到的jedis实例均是可用的*/
        config.setTestOnBorrow(true);
        /*创建连接池*/
        this.pool = new JedisPool(config,ip,port,100000);
    }
}
创建 set()方法，向redis存入key和value,并释放连接资源 如果key已经存在 则覆盖；成功 返回OK 失败返回 0
public String set(String key,String value){
    Jedis jedis = null;
    try{
        jedis = this.pool.getResource();
        String result = jedis.set(key,value);
        return result;
    }catch (Exception e){
        this.pool.returnBrokenResource(jedis);
        e.printStackTrace();
        return "0";
    }finally {
        this.returnResource(this.pool, jedis);
    }
}
创建 pipelineSyncAll()方法，将多个命令放到事务里面，提交事务时，共同执行，避免每个命令分别执行时，造成
多次发送和返回结果浪费资源；
*****************************************************************************************
开启事务与不开启事务的区别？？？
不开启事务，每个命令直接执行；开启事务，事务里面的命令先不执行，等提交时再一起执行，有一个命令执行失败，
其他已执行命令回滚，所有命令都执行成功才最终成功；
*****************************************************************************************
/**-------------利用pipeline的事务将多个命令共同执行-------------------*/
public void pipelineSyncAll(){
    Jedis jedis = null;
    try {
        jedis = this.pool.getResource();
        /*jedis获取多命令共同执行对象 pipeline*/
        Pipeline pipeline = jedis.pipelined();
        /**pipeline事务开始*/
        /**事务开始，事务结束，这两者中间的语句暂不执行，等事务提交时一起执行*/
        pipeline.multi();
        pipeline.set("gouyan","123");
        pipeline.incrBy("age",3);
        pipeline.get("gouyan");
        /**pipelin事务结束*/
        pipeline.exec();
        /**提交事务，list中存事务中每个语句(命令)的返回结果*/
        List<Object> list = pipeline.syncAndReturnAll();
        for (Object obj : list){
            System.out.println(JSON.toJSONString(obj));
        }
    }catch (Exception e){
        pool.returnBrokenResource(jedis);
        e.printStackTrace();
    }finally {
        /*返还连接池pool jedis 对象*/
        returnResource(this.pool,jedis);
    }
}
输出结果：
"OK"
"QUEUED"
"QUEUED"
"QUEUED"
["OK",3,"123"]