b.handler()与b.childHanlder()方法：
①不管是服务端还是客户端都进行了handler的设置，通过添加hanlder，我们可以监听Channel的各种动作以及状态
的改变，包括连接，绑定，接收消息等；关闭
②在服务端的ServerBootstrap中增加了一个方法childHandler，它的目的是添加handler，用来监听已经连接的客
户端的Channel的动作和状态。
③handler在初始化时就会执行，而childHandler会在客户端成功connect后才执行，这是两者的区别。
④一定要分清.handler和.childHandler的区别，首先，两者都是设置一个Handler，但是，前者设置的Handler是
属于服务端NioServerSocketChannel的，而后者设置的Handler是属于每一个新建的NioSocketChannel的（每当
有一个来自客户端的连接时，否会创建一个新的NioSocketChannel）
-------------------------简书闪电侠--------------------------------------
-------------------------netty源码分析之新连接接入全解析-------------------
前序背景
读这篇文章之前，最好掌握一些前序知识，包括netty中的reactor线程，以及服务端启动过程，下面我带你简单地回顾
一下；
1.netty中的reactor线程
netty中最核心的东西莫过于两种类型的reactor线程，可以看作netty中两种类型的发动机，驱动着netty整个框架的
运转：
①一种类型的reactor线程是boss线程组，专门用来接受新的连接，然后封装成channel对象扔给worker线程组；
②还有一种类型的reactor线程是worker线程组，专门用来处理连接的读写；
不管是boss线程还是worker线程，所做的事情均分为以下三个步骤：
①轮询注册在selector上的IO事件
②处理IO事件
③执行异步task
对于boss线程来说，第一步轮询出来的基本都是 accept 事件，表示有新的连接，而worker线程轮询出来的基本都是
read/write事件，表示网络的读写事件;

2.服务端启动
服务端启动过程是在用户线程中开启，第一次添加异步任务的时候启动boss线程被启动，netty将处理新连接的过程封装
成一个channel，对应的pipeline会按顺序处理新建立的连接(关于pipeline我后面会开篇详细分析);

了解完两个背景，我们开始进入正题

新连接的建立
简单来说，新连接的建立可以分为三个步骤
1.检测到有新的连接
2.将新的连接注册到worker线程组
3.注册新连接的读事件

下面带你庖丁解牛，一步步分析整个过程 guanbi