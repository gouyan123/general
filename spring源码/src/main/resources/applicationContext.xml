<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--<beans xmlns="http://www.springframework.org/schema/beans"-->
       <!--xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"-->
       <!--xmlns:context="http://www.springframework.org/schema/context"-->

       <!--xsi:schemaLocation="http://www.springframework.org/schema/beans-->
      <!--http://www.springframework.org/schema/beans/spring-beans.xsd-->
      <!--http://www.springframework.org/schema/context-->
      <!--http://www.springframework.org/schema/context/spring-context.xsd">-->

    <!--&lt;!&ndash;注册&ndash;&gt;-->
    <!--&lt;!&ndash;对象保存到了容器里面，程序中需要创建容器对象，然后去容器里面获取该对象&ndash;&gt;-->
    <!--&lt;!&ndash;spring容器创建Bean&ndash;&gt;-->
    <!--&lt;!&ndash;<bean id="someService" class="com.bjpowernode.service.SomeServiceImpl" scope="singleton"-->
          <!--init-method="setUp" destroy-method="tearDown">-->
        <!--&lt;!&ndash;注入成员变量：初始化bean，执行的是无参构造，因此要注入成员变量&ndash;&gt;-->
        <!--<property name="adao" value="aaa"/>-->
    <!--</bean>&ndash;&gt;-->

    <!--&lt;!&ndash;注册动态工厂&ndash;&gt;-->
    <!--&lt;!&ndash;<bean id="serviceFactory" class="com.bjpowernode.service.ServiceFactory"/>&ndash;&gt;-->
    <!--&lt;!&ndash;动态工厂创建Bean&ndash;&gt;-->
    <!--&lt;!&ndash;<bean id="someService" factory-bean="serviceFactory" factory-method="getSomeService"/>&ndash;&gt;-->

    <!--&lt;!&ndash;静态工厂创建Bean&ndash;&gt;&lt;!&ndash;静态工厂的对象无法调用工厂静态方法，因此不需要静态工厂的bean&ndash;&gt;-->
    <!--&lt;!&ndash;<bean id="someService" class="com.bjpowernode.service.ServiceFactory" factory-method="getSomeService"/>&ndash;&gt;-->

    <!--&lt;!&ndash;注册bean后处理器&ndash;&gt;-->
    <!--&lt;!&ndash;<bean class="com.bjpowernode.service.MyBeanPostProcessor"/>&ndash;&gt;-->
    <!--&lt;!&ndash;==========================================================================&ndash;&gt;-->
    <!--&lt;!&ndash;注册student&ndash;&gt;-->
    <!--&lt;!&ndash;<bean id="school" class="com.bjpowernode.di.School">-->
        <!--<property name="name" value="BeiJing"/>-->
    <!--</bean>-->
    <!--<bean id="student" class="com.bjpowernode.di.Student" autowire="byName">&lt;!&ndash;域属性即对象属性已经在容器中生成，可根据名称或者类型直接注入&ndash;&gt;-->
        <!--<property name="name" value="zhangsan"/>-->
        <!--<property name="age" value="20"/>-->
        <!--&lt;!&ndash;<property name="school" ref="school"/>&ndash;&gt;-->
    <!--</bean>&ndash;&gt;-->
    <!--&lt;!&ndash;2.3.5 使用SPEL注入&ndash;&gt;-->
    <!--&lt;!&ndash;注册person&ndash;&gt;-->
    <!--&lt;!&ndash;<bean id="person" class="com.bjpowernode.di.Person">-->
        <!--<property name="pname" value="#{student.name}"/>-->
        <!--<property name="page" value="#{student.age > 15 ? 15 : student.age}"/>-->
    <!--</bean>&ndash;&gt;-->

    <!--&lt;!&ndash;=========================基于注解的DI===========================&ndash;&gt;-->
    <!--&lt;!&ndash;扫描包com.bjpowernode.di.annotation及其子包，包中有注解的类都自动生成bean对象&ndash;&gt;-->
    <!--&lt;!&ndash;<context:component-scan base-package="com.bjpowernode.di.annotation"/>&ndash;&gt;-->
    <!--<bean id="school" class="com.bjpowernode.di.annotation.School">-->
        <!--<property name="name" value="bj"/>-->
    <!--</bean>-->
<!--</beans>-->